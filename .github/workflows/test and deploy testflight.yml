name: Test_and_Deploy

on:
  push:
    branches: [ dev ]
    
jobs:
  get_scheme:
    name: Get Scheme
    runs-in: macos-latest
    outputs:
      scheme: ${{ steps.scheme.outputs.scheme }}
    steps:
      - name: scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "::set-output name=scheme::$default"  

  build_and_test:
    name: Build and Test
    runs-on: macos-latest
    strategy:
      matrix: 
        destination: [
          "'platform=iOS Simulator,name=iPhone 13 Pro Max,OS=latest'",
          "'platform=iOS Simulator,name=iPhone 11,OS=latest'"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Xcode version
        run: /usr/bin/xcodebuild -version
      - name: Parse secret
        run: |
          echo "$AMPLIFY_CONF" | base64 -d > ./amplifyconfiguration.json
          echo "AWS_CONF" | base64 -d > ./awsconfiguration.json
        env:
          AMPLIFY_CONF: ${{ secrets.AMPLIFY_CONF }}
          AWS_CONF: ${{ secrets.AWS_CONF }}
      - name: Build
        run: |
          xcodebuild build-for-testing -scheme "$scheme" -destination ${{ matrix.destination }}
        env: 
          scheme: ${{ needs.get_scheme.outputs.scheme }}
      - name: Test
        run: | 
          xcodebuild test-without-building -scheme "$scheme" -destination ${{ matrix.destination }}
        env:
          scheme: ${{ needs.get_scheme.outputs.scheme }}

  build_and_deploy:
    name: Build and Deploy
    runs-on: macos-latest
    needs: [get_scheme, build_and_test]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Xcode version
        run: /usr/bin/xcodebuild -version
      - name: Parse secret
        run: |
          echo "$AMPLIFY_CONF" | base64 -d > ./amplifyconfiguration.json
          echo "$AWS_CONF" | base64 -d > ./awsconfiguration.json
        env:
          AMPLIFY_CONF: ${{ secrets.AMPLIFY_CONF }}
          AWS_CONF: ${{ secrets.AWS_CONF }}
      - name: Build archive
        run: |
          xcodebuild -scheme "$scheme" archive -archivePath "$archive_path/$scheme.xcarchive"
        env:
          scheme: ${{ needs.get_scheme.outputs.scheme }}
          archive_path: ${{ 'archive' }}
      - name: Save archive in Artifact
        uses: actions/upload-artifact@v2
        with:
          name: "archive/$GITHUB_SHA"
          path: "$archive_path/$scheme.xcarchive"
        env:
          scheme: ${{ needs.get_scheme.outputs.scheme }}
          archive_path: ${{ 'archive' }}
      - name: Parse upload secrets
        run: |
          echo "$TESTFLIGHT_DEPLOY_CONF" | base64 -d > ./"$testflight_deploy_conf"
          echo "$APPSTORE_API_PRIVATE_KEY" | base64 -d > ./'private_keys/AuthKey_$PRIV_API_KEY.p8'
        env:
          TESTFLIGHT_DEPLOY_CONF: ${{ secrets.TESTFLIGHT_DEPLOY_CONF }}
          APPSTORE_API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }} 
          PRIV_API_KEY: ${{ 'priv_api_key' }}
      - name: Export to ipa
        run: | 
          xcodebuild -exportArchive -archivePath "$archive_path/$scheme.xcarchive" -exportPath "$ipa_path" -exportOptionsPlist "$testflight_deploy_conf"
        env: 
          scheme: ${{ needs.get_scheme.outputs.scheme }}
          archive_path: ${{ 'archive' }}
          ipa_path: ${{ 'ipa_file.ipa' }}
          testflight_deploy_conf: ${{ 'testflight_deploy_conf.plist' }}
      - name: Upload app to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with: 
          app-path: "$ipa_path"
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.PRIV_API_KEY }}
        env:
          ipa_path: ${{ 'ipa_file.ipa' }}
