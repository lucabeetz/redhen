name: Test_and_Deploy

on:
  push:
    branches: [ dev ]
    
jobs:
  get_scheme:
    runs-on: macos-latest
    outputs:
      scheme: ${{ steps.scheme.outputs.scheme }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - id: scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "::set-output name=scheme::$default"

  scheme_info:
    name: Scheme Info
    runs-on: macos-latest
    needs: get_scheme

    steps:
      - name: Print scheme
        run: |
          echo "Scheme: $scheme"
        env:
          scheme: ${{needs.get_scheme.outputs.scheme}}

  build_and_test:
    name: Build and Test
    runs-on: macos-latest
    needs: get_scheme
    strategy:
      matrix: 
        destination: [
          "'platform=iOS Simulator,name=iPhone 13 Pro Max,OS=latest'",
          "'platform=iOS Simulator,name=iPhone 11,OS=latest'"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Parse secret
        run: |
          echo "$AMPLIFY_CONF" | base64 -d > ./amplifyconfiguration.json
          echo "AWS_CONF" | base64 -d > ./awsconfiguration.json
        env:
          AMPLIFY_CONF: ${{ secrets.AMPLIFY_CONF }}
          AWS_CONF: ${{ secrets.AWS_CONF }}
      - name: Build
        run: |
          xcodebuild build-for-testing -scheme "$scheme" -destination ${{ matrix.destination }}
        env: 
          scheme: ${{ needs.get_scheme.outputs.scheme }}
      - name: Test
        run: | 
          xcodebuild test-without-building -scheme "$scheme" -destination ${{ matrix.destination }}
        env:
          scheme: ${{ needs.get_scheme.outputs.scheme }}

  build_with_signing:
    name: Build and Deploy
    runs-on: macos-latest
    needs: [get_scheme, build_and_test]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Parse backend secrets
        env:
          AMPLIFY_CONF: ${{ secrets.AMPLIFY_CONF }}
          AWS_CONF: ${{ secrets.AWS_CONF }}
        run: |
          echo "$AMPLIFY_CONF" | base64 -d > ./amplifyconfiguration.json
          echo "$AWS_CONF" | base64 -d > ./awsconfiguration.json
      - name: Build archive
        env:
          scheme: ${{ needs.get_scheme.outputs.scheme }}
          archive_path: ${{ 'archive' }}
        run: |
          xcodebuild -scheme "$scheme" archive -archivePath "$archive_path/$scheme.xcarchive"
      - name: Save archive in Artifact
        uses: actions/upload-artifact@v2
        with:
          name: "archive/$GITHUB_SHA"
          path: "$archive_path/$scheme.xcarchive"
        env:
          scheme: ${{ needs.get_scheme.outputs.scheme }}
          archive_path: ${{ 'archive' }}
      - name: Parse upload secrets
        if: ${{ always() }}
        env:
          TESTFLIGHT_DEPLOY_CONF: ${{ secrets.TESTFLIGHT_DEPLOY_CONF }}
          APPSTORE_API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }} 
          PRIV_API_KEY: ${{ 'priv_api_key' }}
        run: |
          echo "$TESTFLIGHT_DEPLOY_CONF" | base64 -d > ./"$testflight_deploy_conf"
          echo "$APPSTORE_API_PRIVATE_KEY" | base64 -d > ./'private_keys/AuthKey_$PRIV_API_KEY.p8'
          cat "./$testflight_deploy_conf"
      - name: Export archive to .ipa
        run: | 
          xcodebuild -exportArchive -archivePath "$archive_path/$scheme.xcarchive" -exportPath "$ipa_path" -exportOptionsPlist "$testflight_deploy_conf"
        env: 
          scheme: ${{ needs.get_scheme.outputs.scheme }}
          archive_path: ${{ 'archive' }}
          ipa_path: ${{ 'ipa_file.ipa' }}
          testflight_deploy_conf: ${{ 'testflight_deploy_conf.plist' }}s
      - name: Upload app to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with: 
          app-path: "$ipa_path"
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.PRIV_API_KEY }}
        env:
          ipa_path: ${{ 'ipa_file.ipa' }}

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
